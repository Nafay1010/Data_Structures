//#################################Q1###########################################
//#include<iostream>
//#include<cstddef>
//using namespace std;
//
//class node{
//		public:
//
//		int data;
//		node *next;
//		node *pre;
//	
//		node(int val)
//		{
//			data=val;
//			next=NULL;
//			pre=NULL; 
//		}
//};
//
//class list{
//	private:
//		node *head;
//		node *tail;
//		int size;
//	public:
//		list()
//		{
//			head=NULL;
//			size=0;
//		}
//		int Return_size()
//		{
//			return size;
//		}
//		void gettail()
//		{
//			tail=head;
//			for(int i=0;i<size-1;i++)
//			{
//				tail=tail->next;
//			}
//			cout<<"TAIL: "<<tail->data<<endl;
//			cout<<endl; 
//		}
//		void get()
//		{
//			node *ptr= head;
//			cout<<"LIST"<<endl;
//			for(int i=0; i<size; i++)
//			{
//				cout<<ptr->data<<"\t";
//				ptr=ptr->next;
//			}
//			cout<<"HEAD: "<<head->data<<endl;
//			gettail();
//			cout<<endl;
//		}
//		void rget()
//		{
//			node *ptr=head;
//			cout<<"REVERSE LIST"<<endl;
//			for(int i=0;i<size-1;i++)
//			{
//				ptr=ptr->next;
//			}
//			for(int i=0;i<size;i++)
//			{
//				cout<<ptr->data<<"\t";
//				ptr=ptr->pre;
//			}
//			gettail();
//			cout<<endl;
//		}
//		bool empty()
//		{
//			if(head==NULL)
//			{
//				return 0;
//			}
//			else
//			{
//				return 1;
//			}
//		}
//		void insert(int val, int pos)
//		{
//		//	cout<<"VAL :"<<val<<" POS: "<<pos<<endl;
//			node *n= new node(val);
//			if(pos==1)
//			{
//			//	cout<<"HEADER POINTER "<<head<<endl;
//				
//				n->pre=NULL;
//				n->next=head;
//				head=n;
//				head->pre=n;
//		
//				size++;
//			}
//			else if(pos>1 || pos<size+1)
//			{
//				node *cptr= head;
//				
//				for(int i=1; i<pos-1;i++)
//					cptr=cptr->next;
//				
//					
//				n->next=cptr->next;
//				n->pre=cptr;
//				
//				
//				cptr->next=n;
//				cptr->next->pre=n->pre;
//				
//				
//						
//				//cout<<"N->DATA "<<n->data<<endl;
//				//cout<<"CPTR->NEXT "<<cptr->next<<endl;
//				//cout<<"N->PRE "<<n->pre->data<<endl;
//				size++;			
//			}
//			
//			else
//			{
//				cout<<"INVALID POSITION"<<endl;
//			}
//			
//		}
//		int search(int val)
//		{
//			if(empty()==0)
//			{
//				cout<<"LIST IS EMPTY"<<endl;
//			}
//			int pos=1;
//			node *cptr=head;
//			while(cptr!=NULL)//runs till current pointers address is NULL
//			{
//				if(cptr->data==val)
//				{
//					return pos;//value found
//				}
//				cptr=cptr->next;
//				pos++;
//			}
//			return 0;//value not found
//		
//			
//		}
//		void deletion(int val)
//		{
//			if(search(val)==0)
//			cout<<"VALUE NOT IN LIST"<<endl;
//			else
//			{
//			int pos=search(val);
//			node *cptr=head;
//			if(pos==1)
//			{
//				head=cptr->next;
//				delete cptr;
//				size--;
//			}
//			else if(pos>1 || pos<size)
//			{
//				for(int i=1; i<pos-1;i++)
//				{
//					cptr=cptr->next;
//				}
//				node *dptr= cptr->next;
//				cptr->next->pre=cptr;
//				cptr->next=dptr->next;
//				delete dptr;
//				size--;
//			}
//			 else if(pos==0)
//			{
//				cout<<"LIST IS EMPTY"<<endl;
//			}
//			}
//			
//		}
//		void reverse()
//		{
//			node *temp=NULL;
//			node *ptr=head;
//			for(int i=0;i<size;i++)
//			{
//				temp=ptr->pre;
//				ptr->pre=ptr->next;
//				ptr->next=temp;
//				ptr=ptr->pre;	
//			}
//			temp=head;
//			head=tail;
//			tail=temp;
//		}
//};
//int main()
//{
//	list l1;
//	int val;
//	cout<<"ENTER VALUE TO BE INSERTED: ";
//	cin>>val;
//	int pos=1;
//	while(val!=-1)
//	{
//		l1.insert(val, pos);
//		cout<<"ENTER VALUE TO BE INSERTED[ENTER '-1' to quit]: ";
//		cin>>val;
//		pos++;
//	}
//	
//		cout<<"BEFORE REVERSE "<<endl;
//		l1.get();
//	//	l1.rget();
//		l1.reverse();
//		cout<<"AFTER REVERSE "<<endl;
//		l1.get();
//	//	l1.rget();
//	
//		
//}

//#################################Q2###########################################

#include<iostream>
#include<string>
#include <sstream>
#include<cmath>
using namespace std;

class node{

	public:
		int data;
		node *next;
		
		node(int val)
		{
			data=val;
			next=NULL;
		}
};

class stack{
	private:
		node *cptr;
		node *bottom;
		int size;
		int top;
	public:
		stack()
		{
			top=-1;
			size=0;
			cptr=NULL;
			bottom=NULL;
		}
		
		void start()
		{
			cptr=bottom;
		}
		
		void next()
		{
			cptr=cptr->next;
		}
		
		bool isEmpty()
		{
			if(top==-1 || size==0)
				return 1;
			else
				return 0;
		}
		
		void get()
		{
			start();
			if(isEmpty())
			{
				cout<<"STACK IS EMTPY"<<endl;
			}
			else
			{
				for(int i=0;i<size;i++)
				{
					cout<<cptr->data<<endl;
					next();
				}
			}
			start();
		}
		
		void print()
		{
			{
				
				cout<<"=============STACK============="<<endl;
				for(int i=size;i>0;i--)
				{
					if(isEmpty())
						{
							cout<<"STACK IS EMPTY"<<endl;
							break;
						}
						else
						{
							cout<<POP()<<endl;
						}
				}
					cout<<endl;
			}
		}
		
		void clear()
		{
			start();
				for(int i=0;i<size;i++)
				{
					cptr->data=0;
					next();
				}
				size=0;
				top=-1;
			start();
		}
		
		void PUSH(int val)
		{
			start();
			node *n=new node(val);
			
			if(top==-1)
			{
				n->next=bottom;
				bottom=n;
				top++;
				size++;
				start();
			}
			else
			{
				for(int i=1;i<size;i++)
				{
					next();
				}
				n->next=cptr->next;
				cptr->next=n;
				top++;
				size++;
				start();
			}
			
		}

		int POP()
		{
			start();
			if(isEmpty())
			{
				cout<<"STACK IS EMPTY"<<endl;
			}
			else if(top==0 || size==1)
			{
				bottom=cptr->next;
				int Dval=cptr->data;
				delete cptr;
				size--;
				top--;
				return Dval;
			}
			else
			{
				for(int i=1;i<size-1;i++)
				{
					next();
				}
				node *dptr=cptr->next;
				cptr->next=dptr->next;
				int Dval=dptr->data;
				delete dptr;
				size--;
				top--;
				return Dval;
				
			}
			start();
		}
};

		int evalPostFix(string pof)
		{
			stack s1;
			s1.clear();
			
			
			int R;
			int op1;
			int op2;
			
			int len=pof.length(); //length of expression
	
			int i=0;
			int j=0;
			while(i<len)
			{
				if(pof.at(i)=='+')
				{
					//adding operands
					op2=s1.POP();
					op1=s1.POP();
					
					R=op1+op2;
					s1.PUSH(R);
				}
				else if(pof.at(i)=='-')
				{
					//subtracting operands
					op2=s1.POP();
					op1=s1.POP();
					
					R=op1-op2;
					s1.PUSH(R);
				}
				else if(pof.at(i)=='*')
				{
					//multiplying operands
					op2=s1.POP();
					op1=s1.POP();
					
					R=op1*op2;
					s1.PUSH(R);
				}
				else if(pof.at(i)=='/')
				{
					//dividing operands
					op2=s1.POP();
					op1=s1.POP();
					
					R=op1/op2;
					s1.PUSH(R);
				}
				else if(pof.at(i)=='^')
				{
					//Taking power of the respective operands
					op2=s1.POP();
					op1=s1.POP();
					
					R=pow(op1,op2);
					s1.PUSH(R);
				}
				else if(pof.at(i)=='_')
				{
					//considering all the digits before space character as a whole
					int mul=1;
					R=s1.POP();
					for(int x=0; x<j-1; x++)
					{
						mul=mul*10;
						op1=mul*s1.POP();
						
						R=R+op1;
					}
					
					s1.PUSH(R);
					j=0;
					
				}
				else
				{
					s1.PUSH((pof.at(i))-48);
					j++;	
				}
				i++;	
			}
			
			return s1.POP();
		}

int main()
{
	
	string postfix; //declaring postfix expression as string
	
	cout<<"ENTER THE EXPRESSSION [FOR SPACE CHARACTER USE '_']: ";
	cin>>postfix; //got the expression from user
	
	cout<<"RESULT: "<<evalPostFix(postfix)<<endl;
	
}