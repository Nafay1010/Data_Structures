#include<iostream>
#include<string>
#include <sstream>
#include<cmath>
using namespace std;

class node{

	public:
		int data;
		node *next;
		
		node(int val)
		{
			data=val;
			next=NULL;
		}
};

class stack{
	private:
		node *cptr;
		node *bottom;
		int size;
		int top;
	public:
		stack()
		{
			top=-1;
			size=0;
			cptr=NULL;
			bottom=NULL;
		}
		
		void start()
		{
			cptr=bottom;
		}
		
		void next()
		{
			cptr=cptr->next;
		}
		
		bool isEmpty()
		{
			if(top==-1 || size==0)
				return 1;
			else
				return 0;
		}
		
		void get()
		{
			start();
			if(isEmpty())
			{
				cout<<"STACK IS EMTPY"<<endl;
			}
			else
			{
				for(int i=0;i<size;i++)
				{
					cout<<cptr->data<<endl;
					next();
				}
			}
			start();
		}
		
		void print()
		{
			{
				
				cout<<"=============STACK============="<<endl;
				for(int i=size;i>0;i--)
				{
					if(isEmpty())
						{
							cout<<"STACK IS EMPTY"<<endl;
							break;
						}
						else
						{
							cout<<POP()<<endl;
						}
				}
					cout<<endl;
			}
		}
		
		void clear()
		{
			start();
				for(int i=0;i<size;i++)
				{
					cptr->data=0;
					next();
				}
				size=0;
				top=-1;
			start();
		}
		
		void PUSH(int val)
		{
			start();
			node *n=new node(val);
			
			if(top==-1)
			{
				n->next=bottom;
				bottom=n;
				top++;
				size++;
				start();
			}
			else
			{
				for(int i=1;i<size;i++)
				{
					next();
				}
				n->next=cptr->next;
				cptr->next=n;
				top++;
				size++;
				start();
			}
			
		}

		int POP()
		{
			start();
			if(isEmpty())
			{
				cout<<"STACK IS EMPTY"<<endl;
			}
			else if(top==0 || size==1)
			{
				bottom=cptr->next;
				int Dval=cptr->data;
				delete cptr;
				size--;
				top--;
				return Dval;
			}
			else
			{
				for(int i=1;i<size-1;i++)
				{
					next();
				}
				node *dptr=cptr->next;
				cptr->next=dptr->next;
				int Dval=dptr->data;
				delete dptr;
				size--;
				top--;
				return Dval;
				
			}
			start();
		}
};

		int evalPostFix(string pof)
		{
			stack s1;
			s1.clear();
			
			
			int R;
			int op1;
			int op2;
			
			int len=pof.length(); //length of expression
	
			int i=0;
			int j=0;
			while(i<len)
			{
				if(pof.at(i)=='+')
				{
					//adding operands
					op2=s1.POP();
					op1=s1.POP();
					
					R=op1+op2;
					s1.PUSH(R);
				}
				else if(pof.at(i)=='-')
				{
					//subtracting operands
					op2=s1.POP();
					op1=s1.POP();
					
					R=op1-op2;
					s1.PUSH(R);
				}
				else if(pof.at(i)=='*')
				{
					//multiplying operands
					op2=s1.POP();
					op1=s1.POP();
					
					R=op1*op2;
					s1.PUSH(R);
				}
				else if(pof.at(i)=='/')
				{
					//dividing operands
					op2=s1.POP();
					op1=s1.POP();
					
					R=op1/op2;
					s1.PUSH(R);
				}
				else if(pof.at(i)=='^')
				{
					//Taking power of the respective operands
					op2=s1.POP();
					op1=s1.POP();
					
					R=pow(op1,op2);
					s1.PUSH(R);
				}
				else if(pof.at(i)=='_')
				{
					//considering all the digits before space character as a whole
					int mul=1;
					R=s1.POP();
					for(int x=0; x<j-1; x++)
					{
						mul=mul*10;
						op1=mul*s1.POP();
						
						R=R+op1;
					}
					
					s1.PUSH(R);
					j=0;
					
				}
				else
				{
					s1.PUSH((pof.at(i))-48);
					j++;	
				}
				i++;	
			}
			
			return s1.POP();
		}
		
		int evalPreFix(string pef)
		{
			stack s2;
			s2.clear();
			
			int OP1;
			int OP2;
			
			int i=pef.length()-1;
		
			
			while(i>=0)
			{
				if(pef.at(i)=='+')
				{
					//adding operands
					OP1=s2.POP();
					OP2=s2.POP();
				
					s2.PUSH(OP1+OP2);
				}
				else if(pef.at(i)=='-')
				{
					//subtracting operands
					OP1=s2.POP();
					OP2=s2.POP();
					
					s2.PUSH(OP1-OP2);
				}
				else if(pef.at(i)=='*')
				{
					//multiplying operands
					OP1=s2.POP();
					OP2=s2.POP();

					s2.PUSH(OP1*OP2);
				}
				else if(pef.at(i)=='/')
				{
					//dividing operands
					OP1=s2.POP();
					OP2=s2.POP();
					
					s2.PUSH(OP1/OP2);
				}
				else if(pef.at(i)=='^')
				{
					//Taking power of the respective operands
					OP2=s2.POP();
					OP1=s2.POP();
					s2.PUSH(pow(OP1,OP2));
				}
				else
				{
					s2.PUSH((pef.at(i))-48);	
				}
				i--;
			}
			return s2.POP();

			}

int main()
{
	
	string postfix; //declaring postfix expression as string
	string prefix; //declaring prefix expression as string
	
//	cout<<"ENTER THE EXPRESSION IN POSTFIX FORM [FOR SPACE CHARACTER USE '_']: ";
//	cin>>postfix; //got the expression from user
//	
//	cout<<"RESULT: "<<evalPostFix(postfix)<<endl;
	
	cout<<"ENTER THE EXPRESSION IN PREFIX FORM [FOR SPACE CHARACTER USE '_']: ";
	cin>>prefix; //got the expression from user
	
	cout<<"RESULT: "<<evalPreFix(prefix)<<endl;
	
	
	
}

